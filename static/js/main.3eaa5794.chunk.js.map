{"version":3,"sources":["components/Nav.js","components/About.js","components/ProjectModal.js","components/Projects.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","About","ProjectModal","props","handleOpenModal","bind","handleCloseModal","state","showModal","this","setState","onClick","isOpen","url","ProjectUrl","Component","Projects","href","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4YAaeA,EAVH,WACV,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,cCGSC,G,MARD,WACZ,OACE,yBAAKF,UAAU,SACb,wC,gDCgCSG,E,YAhCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAPC,EAQnBC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBANjB,EAAKE,MAAQ,CACXC,WAAW,GAHI,E,+EAWjBC,KAAKC,SAAS,CAAEF,WAAW,M,yCAI3BC,KAAKC,SAAS,CAAEF,WAAW,M,+BAG3B,OACE,6BACE,4BAAQG,QAASF,KAAKL,iBAAtB,cACA,kBAAC,IAAD,CAAOQ,OAAQH,KAAKF,MAAMC,UAAWT,UAAU,gBAC7C,kBAAC,IAAD,CAAQc,IAAKJ,KAAKN,MAAMW,WAAYf,UAAU,mBAC9C,yBAAKA,UAAU,cAAcY,QAASF,KAAKH,kBAA3C,W,GAxBiBS,aCeZC,EAfE,WACf,OACE,yBAAKjB,UAAU,YACb,wCACA,uBAAGkB,KAAK,8CAAR,cACA,uBAAGA,KAAK,4CAAR,aACA,uBAAGA,KAAK,2CAAR,WACA,uBAAGA,KAAK,uDAAR,kCAGA,kBAAC,EAAD,CAAcH,WAAW,6DCHhBI,G,MATF,WACX,OACE,yBAAKnB,UAAU,QACb,6CACA,+F,OCgBSoB,E,iLAbX,OACE,kBAAC,IAAD,KACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWrB,IAChC,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,UAAWN,U,GAR3BD,aCIEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3eaa5794.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Nav = () => {\n  return (\n    <div className=\"navbar\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n      <Link to=\"/projects\">Projects</Link>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport \"../style/About.css\";\n\nconst About = () => {\n  return (\n    <div className=\"About\">\n      <h1>About</h1>\n    </div>\n  );\n};\n\nexport default About;\n","import React, { Component } from \"react\";\nimport \"../style/ProjectModal.css\";\nimport Iframe from \"react-iframe\";\nimport Modal from \"react-modal\";\n\nclass ProjectModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false\n    };\n  }\n\n  handleOpenModal = this.handleOpenModal.bind(this);\n  handleCloseModal = this.handleCloseModal.bind(this);\n\n  handleOpenModal() {\n    this.setState({ showModal: true });\n  }\n\n  handleCloseModal() {\n    this.setState({ showModal: false });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleOpenModal}>Open Modal</button>\n        <Modal isOpen={this.state.showModal} className=\"ProjectModal\">\n          <Iframe url={this.props.ProjectUrl} className=\"ProjectDisplay\" />\n          <div className=\"closeButton\" onClick={this.handleCloseModal}>\n            +\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default ProjectModal;\n","import React from \"react\";\nimport \"../style/Projects.css\";\nimport Iframe from \"react-iframe\";\nimport ProjectModal from \"./ProjectModal\";\n\nconst Projects = () => {\n  return (\n    <div className=\"Projects\">\n      <h1>Projects</h1>\n      <a href=\"https://liamsouthall.github.io/calculator/\">Calculator</a>\n      <a href=\"https://liamsouthall.github.io/DiceGame/\">Dice Game</a>\n      <a href=\"https://liamsouthall.github.io/KeyCode/\">KeyCode</a>\n      <a href=\"https://liamsouthall.github.io/card-game-challenge/\">\n        Card Flip game React Challenge\n      </a>\n      <ProjectModal ProjectUrl=\"https://liamsouthall.github.io/coffee-react-challenge/\" />\n    </div>\n  );\n};\n\nexport default Projects;\n","import React from \"react\";\nimport \"../style/Home.css\";\n\nconst Home = () => {\n  return (\n    <div className=\"Home\">\n      <h1>Liam Southall</h1>\n      <h2>Aspiring Junior Full Stack Developer learning at Code Nation</h2>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport About from \"./components/About\";\nimport Projects from \"./components/Projects\";\nimport Home from \"./components/Home\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Nav />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/projects\" component={Projects} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}